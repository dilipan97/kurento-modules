/* Autogenerated with kurento-module-creator */

#ifndef __FILE_TO_RTSP_ENDPOINT_IMPL_HPP__
#define __FILE_TO_RTSP_ENDPOINT_IMPL_HPP__

#include "FilterImpl.hpp"
#include "FileToRtspEndpoint.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>
#include <functional>

namespace kurento
{
namespace module
{
namespace filetortspendpoint
{
class FileToRtspEndpointImpl;
} /* filetortspendpoint */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::filetortspendpoint::FileToRtspEndpointImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace filetortspendpoint
{

class FileToRtspEndpointImpl : public FilterImpl, public virtual FileToRtspEndpoint
{

public:

  FileToRtspEndpointImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline,
                          const std::string &fileUri, int port);

  virtual ~FileToRtspEndpointImpl() = default;

  /* Next methods are automatically implemented by code generator */
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  virtual void Serialize (JsonSerializer &serializer);

private:

  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  static StaticConstructor staticConstructor;

};

} /* filetortspendpoint */
} /* module */
} /* kurento */

#endif /*  __FILE_TO_RTSP_ENDPOINT_IMPL_HPP__ */
