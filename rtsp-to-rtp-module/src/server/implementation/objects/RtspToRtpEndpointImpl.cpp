/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <RtspToRtpEndpointImplFactory.hpp>
#include "RtspToRtpEndpointImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "SignalHandler.hpp"

#define GST_CAT_DEFAULT kurento_rtsp_to_rtp_endpoint_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoRtspToRtpEndpointImpl"
#define FACTORY_NAME "rtsptortpendpoint"

#define SET_IPCAMERA_URI "ipcamera-uri"
#define SET_RTP_PORT "rtp-port"

namespace kurento
{
namespace module
{
namespace rtsptortpendpoint
{

RtspToRtpEndpointImpl::RtspToRtpEndpointImpl (const boost::property_tree::ptree &config,
                                              std::shared_ptr<MediaPipeline> mediaPipeline,
                                              const std::string &ipcamUri, int port)
    : FilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline) )
{
  GstElement* rtpPlugin;

  g_object_set (element, "filter-factory", FACTORY_NAME, NULL);

  g_object_get (G_OBJECT (element), "filter", &rtpPlugin, NULL);

  if (rtpPlugin == NULL) {
    throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
                            "Media Object not available");
  }

  if(ipcamUri != "") {
      g_object_set(G_OBJECT (rtpPlugin), SET_IPCAMERA_URI, ipcamUri.c_str(), NULL);
  }

  if(port != 0) {
      g_object_set(G_OBJECT (rtpPlugin), SET_RTP_PORT, port, NULL);
  }

  g_object_unref (rtpPlugin);
}

MediaObjectImpl *
RtspToRtpEndpointImplFactory::createObject (const boost::property_tree::ptree &config,
                                            std::shared_ptr<MediaPipeline> mediaPipeline,
                                            const std::string &ipcamUri, int port) const
{
  return new RtspToRtpEndpointImpl (config, mediaPipeline, ipcamUri, port);
}

RtspToRtpEndpointImpl::StaticConstructor RtspToRtpEndpointImpl::staticConstructor;

RtspToRtpEndpointImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* rtsptortpendpoint */
} /* module */
} /* kurento */
